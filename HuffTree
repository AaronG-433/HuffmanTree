import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class HuffTree implements HuffmanCoding
{
    private HuffNode root;

    /** Constructors */
    HuffTree()          //default constructor
    {root = null; }
    HuffTree(char el, int wt)           //leaf constructor
    { root = new HuffNode(el, wt); }
    HuffTree(HuffNode l, HuffNode r, int wt)        //internal node constructor
    { root = new HuffNode(l, r, wt); }

    //returns root
    HuffNode root()
    { return root; }

    //returns weight
    public int weight() // Weight of tree is weight of root
    { return root.weight(); }

    //copy this from online source?
    //copy buildTree from online source?


    //*******Format for printing***********
    //
    //For character and frequency print out there should be
    //character space integer newline
    //String charFreqTable = new String();
    //char myChar;
    //int myFrequency;
    ////one line of the table would be as follows:
    //charFreqTable = char+" "+myFrequency+"\n";
    //For character and code print out there should be
    //character space String newline
    //String charCodeTable = new String();
    //char myChar;
    //      String myCodeString;  //string of 1s and 0s.
    ////one line of the table would be as follows
    //charCodeTable = char+" "+myCodeString+"\n";
    //*******************

    //read every character and create an array of its frequencies
    //file reader found at http://www.java2s.com/Code/Java/File-Input-Output/Readfilecharacterbycharacter.htm
    public int[] createArray(File inputFile)
    {
        //check that file exists
        if(!inputFile.exists())
        {
            System.out.println("ERROR: Input file does not exist.");
            return null;
        }
        //check that file can be read
        if(!(inputFile.isFile() && inputFile.canRead()))
        {
            System.out.println("ERROR: Input file cannot be read.");
            return null;
        }
        int[] arr = new int[128];       //
        try
        {
            FileInputStream reader = new FileInputStream(inputFile);
            char current;
            while (reader.available() > 0)          //read every character in the file
            {
                current = (char) reader.read();
                if(current != 10)
                    arr[current]+= 1;
            }
        }
        catch (IOException e)         //catch and print any exceptions
        {
            e.printStackTrace();
        }
        return arr;
    }

    //take a file as input and create a table with characters and frequencies
    //print the characters and frequencies
    public String getFrequencies(File inputFile) throws FileNotFoundException
    {
        FileInputStream fInputStream = new FileInputStream(inputFile);      //throws FileNotFoundException if not there
        int[] freqArr = createArray(inputFile);
        String charFreqTable = new String();
        for(int i=0; i<128; i++)
        {
            if(freqArr[i]!=0)
            {
                charFreqTable+= (char)i+" "+freqArr[i]+"\n";
            }
        }
        return charFreqTable;
    }

    //take a file as input and create a Huffman Tree
    public HuffTree buildTree(File inputFile) throws FileNotFoundException, Exception
    {
        FileInputStream fInputStream = new FileInputStream(inputFile);      //throws FileNotFoundException if not there
        HuffTree tmp1, tmp2, tmp3 = null;
        Heap tempHeap = new Heap(createArray(inputFile));           //create the heap based on the inputFile

        while (tempHeap.size() > 1) { // While two or more items left
            tmp1 = tempHeap.removeMin();
            tmp2 = tempHeap.removeMin();
            tmp3 = new HuffTree(tmp1.root(), tmp2.root(), tmp1.weight() + tmp2.weight());
            tempHeap.insert(tmp3);   // Return new tree to heap
        }
        return tmp3;            // Return the completed HuffTree
    }

    //take a file and a HuffTree and encode the file.
    //output a string of 1's and 0's representing the file
    public String encodeFile(File inputFile, HuffTree huffTree) throws FileNotFoundException
    {
        return null;
    }

    //take a String and HuffTree and output the decoded words
    public String decodeFile(String code, HuffTree huffTree) throws Exception
    {
        return null;
    }

    //print the characters and their codes
    public String traverseHuffmanTree(HuffTree tree)
    {

        return null;
    }
}
